{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///workspace/src/lib/articleGenerator.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { PaperInfo, EvaluationResult, PaperArticle, ArticleGenerationResult, BlogPost } from './types';\n\nexport class PaperArticleGenerator {\n  private openai: OpenAI;\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n      baseURL: process.env.OPENAI_API_BASE,\n    });\n  }\n\n  /**\n   * 論文の解説記事を生成する\n   */\n  async generateArticle(paperInfo: PaperInfo, evaluation: EvaluationResult): Promise<PaperArticle> {\n    const prompt = `以下の論文について、一般読者にも理解しやすい解説記事を生成してください。\n\n論文情報:\nタイトル: ${paperInfo.title}\n著者: ${paperInfo.authors.join(', ')}\narXiv ID: ${paperInfo.arxivId}\nカテゴリ: ${paperInfo.subjects.join(', ')}\nAbstract: ${paperInfo.abstract}\n\n評価情報:\n最終スコア: ${evaluation.finalScore}点\n評価理由: ${evaluation.reasoning}\n\n以下の構成で記事を生成してください:\n\n## TL;DR\n(論文の要点を2-3行で簡潔にまとめる)\n\n## 背景・目的\n(この研究が行われた背景と目的を300字程度で説明)\n\n## この論文の良いところ\n(論文の革新性や貢献度について200字程度で説明)\n\n## 論文の内容\n(論文の手法や実験結果について400字程度で詳しく説明)\n\n## 考察\n(論文の意義や限界、今後の展望について300字程度で考察)\n\n## 結論・まとめ\n(論文の重要性と実用性について200字程度でまとめ)\n\n各セクションは明確に区切り、技術的な内容も一般の読者が理解できるよう平易な言葉で説明してください。`;\n\n    try {\n      const completion = await this.openai.chat.completions.create({\n        model: 'gpt-4.1-mini',\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 2000\n      });\n\n      const content = completion.choices[0].message.content || '';\n      return this.parseArticleContent(content, paperInfo);\n\n    } catch (error) {\n      throw new Error(`Failed to generate article: ${error}`);\n    }\n  }\n\n  /**\n   * 生成されたコンテンツを構造化データに変換\n   */\n  private parseArticleContent(content: string, paperInfo: PaperInfo): PaperArticle {\n    const sections = {\n      tldr: this.extractSection(content, 'TL;DR', '背景・目的'),\n      background: this.extractSection(content, '背景・目的', 'この論文の良いところ'),\n      goodPoints: this.extractSection(content, 'この論文の良いところ', '論文の内容'),\n      content: this.extractSection(content, '論文の内容', '考察'),\n      consideration: this.extractSection(content, '考察', '結論・まとめ'),\n      conclusion: this.extractSection(content, '結論・まとめ', null)\n    };\n\n    return {\n      paperId: paperInfo.arxivId,\n      title: `【論文解説】${paperInfo.title}`,\n      tldr: sections.tldr || 'TL;DRセクションの抽出に失敗しました。',\n      background: sections.background || '背景・目的セクションの抽出に失敗しました。',\n      goodPoints: sections.goodPoints || '良いところセクションの抽出に失敗しました。',\n      content: sections.content || '内容セクションの抽出に失敗しました。',\n      consideration: sections.consideration || '考察セクションの抽出に失敗しました。',\n      conclusion: sections.conclusion || '結論セクションの抽出に失敗しました。',\n      generatedAt: new Date().toISOString()\n    };\n  }\n\n  /**\n   * コンテンツから特定のセクションを抽出\n   */\n  private extractSection(content: string, startMarker: string, endMarker: string | null): string {\n    const startRegex = new RegExp(`##\\\\s*${startMarker}[\\\\s\\\\S]*?\\\\n([\\\\s\\\\S]*?)(?=##|$)`, 'i');\n    const match = content.match(startRegex);\n    \n    if (!match) return '';\n    \n    let sectionContent = match[1].trim();\n    \n    if (endMarker) {\n      const endRegex = new RegExp(`##\\\\s*${endMarker}`, 'i');\n      const endMatch = sectionContent.search(endRegex);\n      if (endMatch !== -1) {\n        sectionContent = sectionContent.substring(0, endMatch).trim();\n      }\n    }\n    \n    return sectionContent;\n  }\n\n  /**\n   * 複数の論文に対して記事を生成\n   */\n  async generateArticlesForPapers(\n    paperResults: Array<{paper: PaperInfo, evaluation: EvaluationResult}>\n  ): Promise<ArticleGenerationResult[]> {\n    const articles: ArticleGenerationResult[] = [];\n\n    for (const result of paperResults) {\n      try {\n        console.log(`Generating article for paper: ${result.paper.arxivId}`);\n        const article = await this.generateArticle(result.paper, result.evaluation);\n        \n        articles.push({\n          paper: result.paper,\n          article,\n          evaluation: result.evaluation\n        });\n\n        // API制限を考慮して待機\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (error) {\n        console.warn(`Failed to generate article for paper ${result.paper.arxivId}:`, error);\n      }\n    }\n\n    return articles;\n  }\n\n  /**\n   * MCP連携用のブログポスト形式に変換（将来の拡張用）\n   */\n  async convertToBlogPost(articleResult: ArticleGenerationResult): Promise<BlogPost> {\n    const { paper, article, evaluation } = articleResult;\n    \n    const blogContent = `${article.tldr}\n\n## 背景・目的\n${article.background}\n\n## この論文の良いところ\n${article.goodPoints}\n\n## 論文の内容\n${article.content}\n\n## 考察\n${article.consideration}\n\n## 結論・まとめ\n${article.conclusion}\n\n---\n**論文情報**\n- タイトル: ${paper.title}\n- 著者: ${paper.authors.join(', ')}\n- arXiv ID: ${paper.arxivId}\n- 評価スコア: ${evaluation.finalScore}点`;\n\n    return {\n      id: `paper-${paper.arxivId}-${Date.now()}`,\n      title: article.title,\n      content: blogContent,\n      tags: [\n        '論文解説',\n        ...paper.subjects,\n        `score-${evaluation.finalScore}`\n      ],\n      status: 'draft',\n      metadata: {\n        paperInfo: paper,\n        evaluationScore: evaluation.finalScore\n      }\n    };\n  }\n\n  /**\n   * 記事のプレビュー用HTML生成\n   */\n  generateArticleHTML(article: PaperArticle): string {\n    return `\n<article class=\"paper-article\">\n  <header>\n    <h1>${article.title}</h1>\n    <p class=\"meta\">生成日時: ${new Date(article.generatedAt).toLocaleString('ja-JP')}</p>\n  </header>\n  \n  <section class=\"tldr\">\n    <h2>TL;DR</h2>\n    <p>${article.tldr}</p>\n  </section>\n  \n  <section class=\"background\">\n    <h2>背景・目的</h2>\n    <p>${article.background}</p>\n  </section>\n  \n  <section class=\"good-points\">\n    <h2>この論文の良いところ</h2>\n    <p>${article.goodPoints}</p>\n  </section>\n  \n  <section class=\"content\">\n    <h2>論文の内容</h2>\n    <p>${article.content}</p>\n  </section>\n  \n  <section class=\"consideration\">\n    <h2>考察</h2>\n    <p>${article.consideration}</p>\n  </section>\n  \n  <section class=\"conclusion\">\n    <h2>結論・まとめ</h2>\n    <p>${article.conclusion}</p>\n  </section>\n</article>`;\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///workspace/src/lib/paperEvaluator.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { PaperInfo, EvaluationResult, FormattedOutput, ArticleGenerationResult } from './types';\nimport { PaperArticleGenerator } from './articleGenerator';\n\nexport class ArxivPaperEvaluator {\n  private openai: OpenAI;\n  private articleGenerator: PaperArticleGenerator;\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n      baseURL: process.env.OPENAI_API_BASE,\n    });\n    this.articleGenerator = new PaperArticleGenerator();\n  }\n\n  /**\n   * ArxivのURLから論文情報を取得\n   */\n  async fetchPaperInfo(arxivUrl: string): Promise<PaperInfo> {\n    // arXiv IDを抽出\n    const arxivIdMatch = arxivUrl.match(/(\\d{4}\\.\\d{5})/);\n    if (!arxivIdMatch) {\n      throw new Error('Invalid arXiv URL');\n    }\n\n    const arxivId = arxivIdMatch[1];\n\n    // arXiv APIを使用して論文情報を取得\n    const apiUrl = `http://export.arxiv.org/api/query?id_list=${arxivId}`;\n    \n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error('Failed to fetch paper information');\n      }\n\n      const xmlText = await response.text();\n      \n      // 簡易的なXMLパース（正規表現を使用）\n      const titleMatch = xmlText.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n      const summaryMatch = xmlText.match(/<summary[^>]*>([\\s\\S]*?)<\\/summary>/);\n      \n      const title = titleMatch ? titleMatch[1].trim() : '';\n      const abstract = summaryMatch ? summaryMatch[1].trim() : '';\n      \n      // 著者情報を取得\n      const authors: string[] = [];\n      const authorMatches = xmlText.matchAll(/<name[^>]*>(.*?)<\\/name>/g);\n      for (const match of authorMatches) {\n        const name = match[1].trim();\n        if (name) authors.push(name);\n      }\n\n      // カテゴリ情報を取得\n      const subjects: string[] = [];\n      const categoryMatches = xmlText.matchAll(/<category[^>]*term=\"([^\"]*)\"[^>]*>/g);\n      for (const match of categoryMatches) {\n        const term = match[1];\n        if (term) subjects.push(term);\n      }\n\n      return {\n        title,\n        authors,\n        abstract,\n        arxivId,\n        subjects\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch paper information: ${error}`);\n    }\n  }\n\n  /**\n   * 指定日付のarXiv論文リストを取得\n   */\n  async fetchPapersByDate(date: string, isDebugMode: boolean = true): Promise<PaperInfo[]> {\n    const categories = ['cs.AI', 'cs.CV', 'cs.LG'];\n    const papers: PaperInfo[] = [];\n    const maxPapersPerCategory = isDebugMode ? 3 : Infinity;\n  \n    for (const category of categories) {\n      let start = 0;\n      let keepFetching = true;\n      let categoryCount = 0;\n  \n      while (keepFetching && categoryCount < maxPapersPerCategory) {\n        try {\n          const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=${start}&max_results=100&sortBy=submittedDate&sortOrder=descending`;\n          const response = await fetch(apiUrl);\n          if (!response.ok) {\n            console.warn(`Failed to fetch papers for category ${category}`);\n            break;\n          }\n  \n          const xmlText = await response.text();\n          const entryMatches = [...xmlText.matchAll(/<entry>([\\s\\S]*?)<\\/entry>/g)];\n  \n          if (entryMatches.length === 0) break;  // もうエントリがない＝終了\n  \n          for (const entryMatch of entryMatches) {\n            if (categoryCount >= maxPapersPerCategory) break;\n            \n            const entryXml = entryMatch[1];\n  \n            const publishedMatch = entryXml.match(/<published>(.*?)<\\/published>/);\n            if (!publishedMatch) continue;\n  \n            const publishedDate = publishedMatch[1].split('T')[0];\n  \n            if (publishedDate === date) {\n              console.log(`New entry for ${category}, count: ${categoryCount}`);\n              \n              // 論文情報抽出\n              const titleMatch = entryXml.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n              const summaryMatch = entryXml.match(/<summary[^>]*>([\\s\\S]*?)<\\/summary>/);\n              const idMatch = entryXml.match(/<id[^>]*>.*?\\/([0-9]{4}\\.[0-9]{4,5})(?:v[0-9]+)?<\\/id>/);\n  \n              const title = titleMatch ? titleMatch[1].trim() : '';\n              const abstract = summaryMatch ? summaryMatch[1].trim() : '';\n              const arxivId = idMatch ? idMatch[1] : '';\n  \n              const authors: string[] = [];\n              const authorMatches = entryXml.matchAll(/<name[^>]*>(.*?)<\\/name>/g);\n              for (const match of authorMatches) {\n                const name = match[1].trim();\n                if (name) authors.push(name);\n              }\n  \n              const subjects: string[] = [];\n              const categoryMatches = entryXml.matchAll(/<category[^>]*term=\"([^\"]*)\"[^>]*>/g);\n              for (const match of categoryMatches) {\n                const term = match[1];\n                if (term) subjects.push(term);\n              }\n  \n              if (title && abstract && arxivId) {\n                papers.push({\n                  title,\n                  authors,\n                  abstract,\n                  arxivId,\n                  subjects,\n                  publishedDate\n                });\n                categoryCount++;\n              }\n            } else if (publishedDate < date) {\n              // これより古い論文は対象外になるので終了\n              keepFetching = false;\n              break;\n            }\n          }\n  \n          start += 100;\n          await new Promise(r => setTimeout(r, 1000));  // レート制限回避\n  \n        } catch (error) {\n          console.warn(`Error fetching papers for category ${category}:`, error);\n          break;\n        }\n      }\n      \n      console.log(`Category ${category}: found ${categoryCount} papers`);\n    }\n  \n    console.log(`Total papers found: ${papers.length}`);\n    return papers;\n  }\n  \n  /**\n   * OpenAI APIを使用して論文を評価\n   */\n  async evaluatePaperWithOpenAI(paperInfo: PaperInfo): Promise<{ evaluation: EvaluationResult, formattedOutput: FormattedOutput }> {\n    const prompt = `Arxiv search toolを使って、次のことを調査してほしい。\n1. 著名な研究者が著者の中に含まれているか\n2. 著名な研究者が1st Authorであるか\n3. タイトルやAbstractより、革新的な論文であるかどうか。\n4. タイトルやAbstractより、機械学習の一般の研究者からビジネス活用を考える一般のビジネスマンまで応用可能性の広い論文であるかどうか。\n上記をそれぞれ1~5の5段階で評価してほしい。\nただし、1については、非常に有名な著者（Jeffery Hintonなど）であれば5をつける。一般に知られていない著者であれば1をつける。満点ではない場合、名は知られていないが精華大学など著名な大学に所属していれば1点を加点して良い（例；名は知られていないが東京大学所属の場合、2点とする)。\nまた、2については、5段階ではなく1 or 5でよい。\n3については、既存概念を覆すレベルであれば満点を、それほどではないが産業活用がすぐに進む見込みのある内容であれば3点をつける。すぐに淘汰されそうな内容であれば1点をつける。\n4については、内容が明瞭であり、一般のビジネスマンにも理解できそうなレベルで産業応用性の高い内容であれば満点をつける。理解できるレベルではあるが適用できる産業が限られる場合（医療限定、など）であれば3点。応用可能性が低く、中長期的にも一部の研究者にしか読まれなそうな内容であれば1点をつける。\n\n1−4の総合点を算出してほしい。\n\nそれを踏まえて、以下の場合+3点加点する。\n・論文において学習を伴う実験が実施されていること\n・GenAIやAIエージェント、画像生成、LLMなど、キャッチーなトピックに関するものである場合\n\n以下の場合、カッコに書いている点数分を減点する。\n・学術的な先進性を示す論文ではなく、新しいGUIに関するWhitePaperなど、Software Engineeringに関する内容である場合。(-5点)\n・論理展開が不透明でエビデンスに乏しい内容の場合 (-4点)\n\n上記を踏まえた最終的な点数を以下フォーマットで出力してほしい。\n理由：{各観点について箇条書きで説明。Total 300字程度で。}\n総計：{各観点の点数を足し算した結果を表示。例：1+2+1+4-3 = 5}\npoint: {点数。総計で算出される点数}\n\n対象論文：\nタイトル: ${paperInfo.title}\n著者: ${paperInfo.authors.join(', ')}\nAbstract: ${paperInfo.abstract}`;\n\n    try {\n      const completion = await this.openai.chat.completions.create({\n        // model: 'gpt-4.1-mini',\n        model: 'gpt-4.1-nano',\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 1000\n      });\n\n      const content = completion.choices[0].message.content || '';\n\n      // レスポンスをパース\n      const { evaluation, formattedOutput } = this.parseOpenAIResponse(content);\n      \n      return { evaluation, formattedOutput };\n\n    } catch (error) {\n      throw new Error(`Failed to evaluate paper with OpenAI: ${error}`);\n    }\n  }\n\n  /**\n   * OpenAIのレスポンスをパースして評価結果に変換\n   */\n  private parseOpenAIResponse(content: string): { evaluation: EvaluationResult, formattedOutput: FormattedOutput } {\n    // 理由を抽出\n    const reasoningMatch = content.match(/理由：([\\s\\S]*?)総計：/);\n    const reasoning = reasoningMatch ? reasoningMatch[1].trim() : content;\n\n    // 総計を抽出\n    const calculationMatch = content.match(/総計：(.*?)(?=point:|$)/);\n    const calculation = calculationMatch ? calculationMatch[1].trim() : '';\n\n    // 点数を抽出\n    const pointMatch = content.match(/point:\\s*(\\d+)/);\n    const finalScore = pointMatch ? parseInt(pointMatch[1]) : 0;\n\n    // 計算式から各項目の点数を推定（簡易的な実装）\n    const parts = calculation.split('=')[0].trim();\n    const numbers = parts.match(/-?\\d+/g) || [];\n    \n    const famousAuthorScore = numbers[0] ? parseInt(numbers[0]) : 1;\n    const firstAuthorScore = numbers[1] ? parseInt(numbers[1]) : 1;\n    const innovationScore = numbers[2] ? parseInt(numbers[2]) : 1;\n    const applicabilityScore = numbers[3] ? parseInt(numbers[3]) : 1;\n    \n    const baseTotal = famousAuthorScore + firstAuthorScore + innovationScore + applicabilityScore;\n    \n    // ボーナス・ペナルティを推定\n    let learningExperimentBonus = 0;\n    let trendyTopicBonus = 0;\n    let softwareEngineeringPenalty = 0;\n    let logicPenalty = 0;\n\n    if (numbers.length > 4) {\n      for (let i = 4; i < numbers.length; i++) {\n        const num = parseInt(numbers[i]);\n        if (num === 3) {\n          if (learningExperimentBonus === 0) learningExperimentBonus = 3;\n          else trendyTopicBonus = 3;\n        } else if (num === -5) {\n          softwareEngineeringPenalty = -5;\n        } else if (num === -4) {\n          logicPenalty = -4;\n        }\n      }\n    }\n\n    const evaluation: EvaluationResult = {\n      famousAuthorScore,\n      firstAuthorScore,\n      innovationScore,\n      applicabilityScore,\n      baseTotal,\n      learningExperimentBonus,\n      trendyTopicBonus,\n      softwareEngineeringPenalty,\n      logicPenalty,\n      finalScore,\n      reasoning\n    };\n\n    const formattedOutput: FormattedOutput = {\n      reasoning,\n      calculation,\n      point: finalScore\n    };\n\n    return { evaluation, formattedOutput };\n  }\n\n  /**\n   * 単一論文を評価（後方互換性のため）\n   */\n  async evaluatePaper(arxivUrl: string): Promise<{ evaluation: EvaluationResult, formattedOutput: FormattedOutput }> {\n    const paperInfo = await this.fetchPaperInfo(arxivUrl);\n    return await this.evaluatePaperWithOpenAI(paperInfo);\n  }\n\n  /**\n   * 指定日付の論文リストを評価\n   */\n  async evaluatePapersByDate(date: string, isDebugMode: boolean = true): Promise<Array<{paper: PaperInfo, evaluation: EvaluationResult, formattedOutput: FormattedOutput}>> {\n    const papers = await this.fetchPapersByDate(date, isDebugMode);\n    const results: Array<{paper: PaperInfo, evaluation: EvaluationResult, formattedOutput: FormattedOutput}> = [];\n\n    console.log(`Starting evaluation of ${papers.length} papers...`);\n\n    for (const paper of papers) {\n      try {\n        const startTime = Date.now();\n        const { evaluation, formattedOutput } = await this.evaluatePaperWithOpenAI(paper);\n        const endTime = Date.now();\n        const durationMs = endTime - startTime;\n        console.log(`Evaluation of ${paper.arxivId} took ${durationMs} ms, score: ${formattedOutput.point}`);\n\n        results.push({ paper, evaluation, formattedOutput });\n        \n        // API制限を考慮して少し待機\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.warn(`Failed to evaluate paper ${paper.arxivId}:`, error);\n      }\n    }\n\n    // 点数順にソートして上位3件のみを返す\n    const sortedResults = results.sort((a, b) => b.formattedOutput.point - a.formattedOutput.point);\n    const top3Results = sortedResults.slice(0, 3);\n    \n    console.log(`Evaluation completed. Total evaluated: ${results.length}, returning top 3 results.`);\n    console.log('Top 3 scores:', top3Results.map(r => r.formattedOutput.point));\n\n    return top3Results;\n  }\n\n  /**\n   * 指定日付の論文リストを評価し、上位3件の解説記事を生成\n   */\n  async evaluatePapersWithArticles(date: string, isDebugMode: boolean = true): Promise<{\n    results: Array<{paper: PaperInfo, evaluation: EvaluationResult, formattedOutput: FormattedOutput}>,\n    articles: ArticleGenerationResult[]\n  }> {\n    // 論文評価を実行\n    const results = await this.evaluatePapersByDate(date, isDebugMode);\n    \n    console.log(`Starting article generation for top ${results.length} papers...`);\n    \n    // 上位3件の論文について記事を生成\n    const articleInputs = results.map(result => ({\n      paper: result.paper,\n      evaluation: result.evaluation\n    }));\n    \n    const articles = await this.articleGenerator.generateArticlesForPapers(articleInputs);\n    \n    console.log(`Article generation completed. Generated ${articles.length} articles.`);\n    \n    return { results, articles };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///workspace/src/app/api/evaluate-with-articles/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ArxivPaperEvaluator } from '@/lib/paperEvaluator';\nimport { DateEvaluationResponse } from '@/lib/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { date, debugMode = true } = await request.json();\n\n    if (!date) {\n      return NextResponse.json({\n        success: false,\n        date: '',\n        totalPapers: 0,\n        error: '日付が指定されていません'\n      } as DateEvaluationResponse);\n    }\n\n    const evaluator = new ArxivPaperEvaluator();\n    const { results, articles } = await evaluator.evaluatePapersWithArticles(date, debugMode);\n\n    return NextResponse.json({\n      success: true,\n      date,\n      totalPapers: results.length,\n      results,\n      articles\n    } as DateEvaluationResponse);\n\n  } catch (error) {\n    console.error('Error in evaluate-with-articles API:', error);\n    return NextResponse.json({\n      success: false,\n      date: '',\n      totalPapers: 0,\n      error: `評価中にエラーが発生しました: ${error instanceof Error ? error.message : 'Unknown error'}`\n    } as DateEvaluationResponse);\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,YAAY,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErD,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM;gBACN,aAAa;gBACb,OAAO;YACT;QACF;QAEA,MAAM,YAAY,IAAI,8HAAA,CAAA,sBAAmB;QACzC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,UAAU,0BAA0B,CAAC,MAAM;QAE/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,aAAa,QAAQ,MAAM;YAC3B;YACA;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,aAAa;YACb,OAAO,CAAC,gBAAgB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,iBAAiB;QACtF;IACF;AACF","debugId":null}}]
}