{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/tajimi/workspace/arxiv_reader/src/lib/paperEvaluator.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { PaperInfo, EvaluationResult, FormattedOutput } from './types';\n\nexport class ArxivPaperEvaluator {\n  private openai: OpenAI;\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY,\n      baseURL: process.env.OPENAI_API_BASE,\n    });\n  }\n\n  /**\n   * ArxivのURLから論文情報を取得\n   */\n  async fetchPaperInfo(arxivUrl: string): Promise<PaperInfo> {\n    // arXiv IDを抽出\n    const arxivIdMatch = arxivUrl.match(/(\\d{4}\\.\\d{5})/);\n    if (!arxivIdMatch) {\n      throw new Error('Invalid arXiv URL');\n    }\n\n    const arxivId = arxivIdMatch[1];\n\n    // arXiv APIを使用して論文情報を取得\n    const apiUrl = `http://export.arxiv.org/api/query?id_list=${arxivId}`;\n    \n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error('Failed to fetch paper information');\n      }\n\n      const xmlText = await response.text();\n      \n      // 簡易的なXMLパース（正規表現を使用）\n      const titleMatch = xmlText.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n      const summaryMatch = xmlText.match(/<summary[^>]*>([\\s\\S]*?)<\\/summary>/);\n      \n      const title = titleMatch ? titleMatch[1].trim() : '';\n      const abstract = summaryMatch ? summaryMatch[1].trim() : '';\n      \n      // 著者情報を取得\n      const authors: string[] = [];\n      const authorMatches = xmlText.matchAll(/<name[^>]*>(.*?)<\\/name>/g);\n      for (const match of authorMatches) {\n        const name = match[1].trim();\n        if (name) authors.push(name);\n      }\n\n      // カテゴリ情報を取得\n      const subjects: string[] = [];\n      const categoryMatches = xmlText.matchAll(/<category[^>]*term=\"([^\"]*)\"[^>]*>/g);\n      for (const match of categoryMatches) {\n        const term = match[1];\n        if (term) subjects.push(term);\n      }\n\n      return {\n        title,\n        authors,\n        abstract,\n        arxivId,\n        subjects\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch paper information: ${error}`);\n    }\n  }\n\n  /**\n   * 指定日付のarXiv論文リストを取得\n   */\n  async fetchPapersByDate(date: string): Promise<PaperInfo[]> {\n    const categories = ['cs.AI', 'cs.CV', 'cs.LG'];\n    const papers: PaperInfo[] = [];\n\n    for (const category of categories) {\n      try {\n        // arXiv APIで指定カテゴリの論文を取得\n        const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=100&sortBy=submittedDate&sortOrder=descending`;\n        \n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          console.warn(`Failed to fetch papers for category ${category}`);\n          continue;\n        }\n\n        const xmlText = await response.text();\n        \n        // エントリを抽出\n        const entryMatches = xmlText.matchAll(/<entry>([\\s\\S]*?)<\\/entry>/g);\n        \n        for (const entryMatch of entryMatches) {\n          const entryXml = entryMatch[1];\n          \n          // 投稿日をチェック\n          const publishedMatch = entryXml.match(/<published>(.*?)<\\/published>/);\n          if (publishedMatch) {\n            const publishedDate = publishedMatch[1].split('T')[0]; // YYYY-MM-DD形式\n            if (publishedDate === date) {\n              // 論文情報を抽出\n              const titleMatch = entryXml.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/);\n              const summaryMatch = entryXml.match(/<summary[^>]*>([\\s\\S]*?)<\\/summary>/);\n              const idMatch = entryXml.match(/<id[^>]*>.*?\\/([0-9]{4}\\.[0-9]{5})<\\/id>/);\n              \n              const title = titleMatch ? titleMatch[1].trim() : '';\n              const abstract = summaryMatch ? summaryMatch[1].trim() : '';\n              const arxivId = idMatch ? idMatch[1] : '';\n              \n              // 著者情報を取得\n              const authors: string[] = [];\n              const authorMatches = entryXml.matchAll(/<name[^>]*>(.*?)<\\/name>/g);\n              for (const match of authorMatches) {\n                const name = match[1].trim();\n                if (name) authors.push(name);\n              }\n\n              // カテゴリ情報を取得\n              const subjects: string[] = [];\n              const categoryMatches = entryXml.matchAll(/<category[^>]*term=\"([^\"]*)\"[^>]*>/g);\n              for (const match of categoryMatches) {\n                const term = match[1];\n                if (term) subjects.push(term);\n              }\n\n              if (title && abstract && arxivId) {\n                papers.push({\n                  title,\n                  authors,\n                  abstract,\n                  arxivId,\n                  subjects,\n                  publishedDate: publishedDate\n                });\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`Error fetching papers for category ${category}:`, error);\n      }\n    }\n\n    return papers;\n  }\n\n  /**\n   * OpenAI APIを使用して論文を評価\n   */\n  async evaluatePaperWithOpenAI(paperInfo: PaperInfo): Promise<{ evaluation: EvaluationResult, formattedOutput: FormattedOutput }> {\n    const prompt = `Arxiv search toolを使って、次のことを調査してほしい。\n1. 著名な研究者が著者の中に含まれているか\n2. 著名な研究者が1st Authorであるか\n3. タイトルやAbstractより、革新的な論文であるかどうか。\n4. タイトルやAbstractより、機械学習の一般の研究者からビジネス活用を考える一般のビジネスマンまで応用可能性の広い論文であるかどうか。\n上記をそれぞれ1~5の5段階で評価してほしい。\nただし、1については、非常に有名な著者（Jeffery Hintonなど）であれば5をつける。一般に知られていない著者であれば1をつける。満点ではない場合、名は知られていないが精華大学など著名な大学に所属していれば1点を加点して良い（例；名は知られていないが東京大学所属の場合、2点とする)。\nまた、2については、5段階ではなく1 or 5でよい。\n3については、既存概念を覆すレベルであれば満点を、それほどではないが産業活用がすぐに進む見込みのある内容であれば3点をつける。すぐに淘汰されそうな内容であれば1点をつける。\n4については、内容が明瞭であり、一般のビジネスマンにも理解できそうなレベルで産業応用性の高い内容であれば満点をつける。理解できるレベルではあるが適用できる産業が限られる場合（医療限定、など）であれば3点。応用可能性が低く、中長期的にも一部の研究者にしか読まれなそうな内容であれば1点をつける。\n\n1−4の総合点を算出してほしい。\n\nそれを踏まえて、以下の場合+3点加点する。\n・論文において学習を伴う実験が実施されていること\n・GenAIやAIエージェント、画像生成、LLMなど、キャッチーなトピックに関するものである場合\n\n以下の場合、カッコに書いている点数分を減点する。\n・学術的な先進性を示す論文ではなく、新しいGUIに関するWhitePaperなど、Software Engineeringに関する内容である場合。(-5点)\n・論理展開が不透明でエビデンスに乏しい内容の場合 (-4点)\n\n上記を踏まえた最終的な点数を以下フォーマットで出力してほしい。\n理由：{各観点について箇条書きで説明。Total 300字程度で。}\n総計：{各観点の点数を足し算した結果を表示。例：1+2+1+4-3 = 5}\npoint: {点数。総計で算出される点数}\n\n対象論文：\nタイトル: ${paperInfo.title}\n著者: ${paperInfo.authors.join(', ')}\nAbstract: ${paperInfo.abstract}`;\n\n    try {\n      const completion = await this.openai.chat.completions.create({\n        model: 'gpt-4.1-mini',\n        messages: [\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 1000\n      });\n\n      const content = completion.choices[0].message.content || '';\n\n      // レスポンスをパース\n      const { evaluation, formattedOutput } = this.parseOpenAIResponse(content);\n      \n      return { evaluation, formattedOutput };\n\n    } catch (error) {\n      throw new Error(`Failed to evaluate paper with OpenAI: ${error}`);\n    }\n  }\n\n  /**\n   * OpenAIのレスポンスをパースして評価結果に変換\n   */\n  private parseOpenAIResponse(content: string): { evaluation: EvaluationResult, formattedOutput: FormattedOutput } {\n    // 理由を抽出\n    const reasoningMatch = content.match(/理由：([\\s\\S]*?)総計：/);\n    const reasoning = reasoningMatch ? reasoningMatch[1].trim() : content;\n\n    // 総計を抽出\n    const calculationMatch = content.match(/総計：(.*?)(?=point:|$)/);\n    const calculation = calculationMatch ? calculationMatch[1].trim() : '';\n\n    // 点数を抽出\n    const pointMatch = content.match(/point:\\s*(\\d+)/);\n    const finalScore = pointMatch ? parseInt(pointMatch[1]) : 0;\n\n    // 計算式から各項目の点数を推定（簡易的な実装）\n    const parts = calculation.split('=')[0].trim();\n    const numbers = parts.match(/-?\\d+/g) || [];\n    \n    const famousAuthorScore = numbers[0] ? parseInt(numbers[0]) : 1;\n    const firstAuthorScore = numbers[1] ? parseInt(numbers[1]) : 1;\n    const innovationScore = numbers[2] ? parseInt(numbers[2]) : 1;\n    const applicabilityScore = numbers[3] ? parseInt(numbers[3]) : 1;\n    \n    const baseTotal = famousAuthorScore + firstAuthorScore + innovationScore + applicabilityScore;\n    \n    // ボーナス・ペナルティを推定\n    let learningExperimentBonus = 0;\n    let trendyTopicBonus = 0;\n    let softwareEngineeringPenalty = 0;\n    let logicPenalty = 0;\n\n    if (numbers.length > 4) {\n      for (let i = 4; i < numbers.length; i++) {\n        const num = parseInt(numbers[i]);\n        if (num === 3) {\n          if (learningExperimentBonus === 0) learningExperimentBonus = 3;\n          else trendyTopicBonus = 3;\n        } else if (num === -5) {\n          softwareEngineeringPenalty = -5;\n        } else if (num === -4) {\n          logicPenalty = -4;\n        }\n      }\n    }\n\n    const evaluation: EvaluationResult = {\n      famousAuthorScore,\n      firstAuthorScore,\n      innovationScore,\n      applicabilityScore,\n      baseTotal,\n      learningExperimentBonus,\n      trendyTopicBonus,\n      softwareEngineeringPenalty,\n      logicPenalty,\n      finalScore,\n      reasoning\n    };\n\n    const formattedOutput: FormattedOutput = {\n      reasoning,\n      calculation,\n      point: finalScore\n    };\n\n    return { evaluation, formattedOutput };\n  }\n\n  /**\n   * 単一論文を評価（後方互換性のため）\n   */\n  async evaluatePaper(arxivUrl: string): Promise<{ evaluation: EvaluationResult, formattedOutput: FormattedOutput }> {\n    const paperInfo = await this.fetchPaperInfo(arxivUrl);\n    return await this.evaluatePaperWithOpenAI(paperInfo);\n  }\n\n  /**\n   * 指定日付の論文リストを評価\n   */\n  async evaluatePapersByDate(date: string): Promise<Array<{paper: PaperInfo, evaluation: EvaluationResult, formattedOutput: FormattedOutput}>> {\n    const papers = await this.fetchPapersByDate(date);\n    const results: Array<{paper: PaperInfo, evaluation: EvaluationResult, formattedOutput: FormattedOutput}> = [];\n\n    for (const paper of papers) {\n      try {\n        const { evaluation, formattedOutput } = await this.evaluatePaperWithOpenAI(paper);\n        results.push({ paper, evaluation, formattedOutput });\n        \n        // API制限を考慮して少し待機\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.warn(`Failed to evaluate paper ${paper.arxivId}:`, error);\n      }\n    }\n\n    return results;\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///Users/tajimi/workspace/arxiv_reader/src/app/api/evaluate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ArxivPaperEvaluator } from '@/lib/paperEvaluator';\nimport { DateEvaluationResponse } from '@/lib/types';\n\nexport async function GET() {\n  return NextResponse.json({\n    message: 'Arxiv Papers Evaluation by Date API',\n    usage: 'POST with { \"date\": \"YYYY-MM-DD\" }',\n    description: 'Evaluates papers from cs.AI, cs.CV, cs.LG categories for the specified date'\n  });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { date } = body;\n\n    if (!date) {\n      return NextResponse.json({\n        success: false,\n        error: 'date is required (format: YYYY-MM-DD)'\n      } as DateEvaluationResponse, { status: 400 });\n    }\n\n    // 日付形式の検証\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!dateRegex.test(date)) {\n      return NextResponse.json({\n        success: false,\n        error: 'Invalid date format. Use YYYY-MM-DD'\n      } as DateEvaluationResponse, { status: 400 });\n    }\n\n    const evaluator = new ArxivPaperEvaluator();\n    const results = await evaluator.evaluatePapersByDate(date);\n\n    return NextResponse.json({\n      success: true,\n      date,\n      totalPapers: results.length,\n      results: results.map(result => ({\n        paper: result.paper,\n        evaluation: result.evaluation,\n        formattedOutput: result.formattedOutput\n      }))\n    } as DateEvaluationResponse);\n\n  } catch (error) {\n    console.error('Error evaluating papers by date:', error);\n    return NextResponse.json({\n      success: false,\n      date: '',\n      totalPapers: 0,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    } as DateEvaluationResponse, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,OAAO;QACP,aAAa;IACf;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAA6B;gBAAE,QAAQ;YAAI;QAC7C;QAEA,UAAU;QACV,MAAM,YAAY;QAClB,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAA6B;gBAAE,QAAQ;YAAI;QAC7C;QAEA,MAAM,YAAY,IAAI,8HAAA,CAAA,sBAAmB;QACzC,MAAM,UAAU,MAAM,UAAU,oBAAoB,CAAC;QAErD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,aAAa,QAAQ,MAAM;YAC3B,SAAS,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;oBAC9B,OAAO,OAAO,KAAK;oBACnB,YAAY,OAAO,UAAU;oBAC7B,iBAAiB,OAAO,eAAe;gBACzC,CAAC;QACH;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,aAAa;YACb,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAA6B;YAAE,QAAQ;QAAI;IAC7C;AACF","debugId":null}}]
}